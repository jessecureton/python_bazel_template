
# We have to register our in-container toolchain prior to registering the hermetic toolchain,
# otherwise since the hermetic toolchain defines no constraints it will end up running in the
# container, which breaks on macOS
#register_toolchains("//:container_py_toolchain")


########################################
# Set up rules_docker
########################################
#http_archive(
#    name = "io_bazel_rules_docker",
#    sha256 = "b1e80761a8a8243d03ebca8845e9cc1ba6c82ce7c5179ce2b295cd36f7e394bf",
#    urls = ["https://github.com/bazelbuild/rules_docker/releases/download/v0.25.0/rules_docker-v0.25.0.tar.gz"],
#)
#
#load(
#    "@io_bazel_rules_docker//repositories:repositories.bzl",
#    container_repositories = "repositories",
#)
#
#container_repositories()
#
#load("@io_bazel_rules_docker//repositories:deps.bzl", container_deps = "deps")
#
#container_deps()

#load(
#    "@io_bazel_rules_docker//python3:image.bzl",
#    _py_image_repos = "repositories",
#)
#load("@io_bazel_rules_docker//container:container.bzl", "container_pull")
#
#container_pull(
#    name = "_hermetic_python_base_image_base",
#    registry = "docker.io",
#    repository = "library/python",
#    tag = "{0}-alpine".format(PY_VERSION),
#)


# Rules Docker somehow requires this to happen as the last line of the file
#_py_image_repos()
